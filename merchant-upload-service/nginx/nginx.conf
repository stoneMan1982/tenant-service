user  nginx;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # Include merchant server configuration
    server {
        listen 80;
        server_name example.com;  # 替换为你的实际域名或服务器IP

        # 商户静态资源根目录（与脚本的BASE_DIR对应）
        root /var/www;

        # 禁止自动301重定向（关键配置）
        absolute_redirect off;
        port_in_redirect off;
        
        # 健康检查路径 - 为所有商户提供统一的健康检查接口
        location ~ ^/([0-9a-zA-Z_]+)/health$ {
            default_type application/json;
            return 200 '{"status": "ok", "merchant_id": "$1", "timestamp": "$time_local"}';
        }

        # 使用正则表达式动态匹配商户路径（支持格式：/merchant_xxx）
        location ~ ^/merchant_([a-zA-Z0-9_]+)$ {
            # 直接提供商户的index.html文件
            root /var/www;
            try_files /merchant_$1/html/merchant_$1_index.html =404;
            expires -1;
            add_header Cache-Control "no-store";
        }
        
        # 为动态商户的静态资源提供访问
        location ~ ^/merchant_([a-zA-Z0-9_]+)/static/ {
            root /var/www;
            try_files /merchant_$1/static$uri =404;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }
        
        # 为动态商户的数据文件提供访问（格式1：带下划线）
        location ~ ^/merchant_([a-zA-Z0-9_]+)/data/(.*)$ {
            root /var/www;
            try_files /merchant_$1/data/$2 =404;
            expires -1;
            add_header Cache-Control "no-store";
        }
        
        # 为动态商户的数据文件提供访问（格式2：纯数字ID）
        location ~ ^/([0-9]+)/data/(.*)$ {
            root /var/www;
            try_files /merchant_$1/data/$2 =404;
            expires -1;
            add_header Cache-Control "no-store";
        }
        
        # 为动态商户的数据文件提供访问（格式3：纯字符ID）
        location ~ ^/([a-zA-Z][a-zA-Z0-9_]*)/data/(.*)$ {
            root /var/www;
            try_files /merchant_$1/data/$2 =404;
            expires -1;
            add_header Cache-Control "no-store";
        }
        
        # 处理纯数字ID带路径的情况（如/1001/abc.html）
        location ~ ^/([0-9]+)/(.+)$ {
            root /var/www;
            try_files /merchant_$1/$2 /merchant_$1/html/$2 =404;
        }
        
        # 处理纯字符ID带路径的情况（如/abc001/abc.html）
        location ~ ^/([a-zA-Z][a-zA-Z0-9_]*)/(.+)$ {
            root /var/www;
            try_files /merchant_$1/$2 /merchant_$1/html/$2 =404;
        }
        
        # 处理格式2：/merchant1001（没有下划线）- 内部重写为带下划线的版本
        location ~ ^/merchant([0-9]+)$ {
            rewrite ^/merchant([0-9]+)$ /merchant_$1 last;
        }
        
        # 处理格式3：纯数字ID（如/20240925）- 内部重写为带下划线的版本
        location ~ ^/([0-9]+)$ {
            rewrite ^/([0-9]+)$ /merchant_$1 last;
        }
        
        # 处理格式4：纯字符ID（如/abc001）- 内部重写为带下划线的版本
        # 注意：这个规则应放在最下面，避免与其他更具体的规则冲突
        # 使用try_files和内部变量$uri来避免使用if条件
        location ~ ^/([a-zA-Z0-9_]+)$ {
            try_files $uri $uri.html /merchant_$1;
        }
        
        # 禁止访问任何config目录（敏感配置，防止泄露）
        location ~* /config/ {
            deny all;
            return 403;
        }

        # 代理Go上传服务（若使用上传功能）
        # location /upload {
        #     proxy_pass http://upload-service:8080;  # 指向Go服务容器
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # }

        # 404错误处理
        error_page 404 /404.html;
        location = /404.html {
            internal;  # 仅内部跳转，不允许直接访问
        }

        # 健康检查（可选）
        location /health {
            access_log off;
            return 200 "OK";
        }
    }
}